@startuml
package "Hardware Absraction Layer (HAL)" {
    interface "COMReset" as ComReset
    interface "ReadKey" as ReadKey
    interface "Crypto" as Crypto
    interface "mbedTLS" as mbedtls
    interface "WiFi" as WiFi
    interface "DNS" as DNS
    interface "mDNS" as MDNS
    interface "OTA" as ota
    interface "FS" as FS
    interface "NVS" as nvshal
    interface "IO" as IO
    interface "Zumo32U4" as zumo32u4interface

    interface "USB" as SPIUSB
    interface "IO" as arduinoIO
    interface "SPI" as SPI

    package "Arduino Core/ESP-IDF" {
        component "Crypto" as cryptohal
        component "mbedTLS" as mbedtlshal
        component "ESP" as esp
        component "WiFi" as wifihal
        component "SPIFFS" as fshal
        component "Preferences" as preferences
        component "DNSServer" as dnsserver
        component "mDNS" as mdnsserver
        component "SPI" as spihal
        component "Digital I/O" as iohal
        component "ESP-IDF-OTA" as arduinoota

        note right of spihal : Serial Peripheral Interface\nabstraction/drivers
        note left of esp : Basic abstraction/drivers\nfor ESP32 functions, such as reset
        note right of iohal :  GPIO hardware\nabstraction/drivers
        note right of arduinoota: Abstraction/drivers to write\nfirmware image of ComPlatform
        note right of preferences : Abstraction/drivers to write\nkey/value pairs to NVS storage
        note right of wifihal: Abstraction/drivers to use\nintegrated WiFi module
        note right of cryptohal: Abstraction/drivers to use\nhardware-accelerated SHA256, BLAKE2b and TRNG
        note right of mbedtlshal : Abstraction/drivers to use\nhardware-accelerated RSA2048
        note right of dnsserver : Abstraction/drivers to provide\nlocal Domain Name System driver
        note right of mdnsserver : Abstraction/drivers to provide\nlocal Domain Name System driver
        note right of fshal : Abstraction/drivers to\nread/write files to\nfile system

        cryptohal -up- Crypto
        mbedtlshal -up- mbedtls
        wifihal -up- WiFi
        fshal -up- FS
        iohal -up- arduinoIO
        spihal -up- SPI
        dnsserver -up- DNS
        mdnsserver -up- MDNS
        preferences -up- nvshal
        arduinoota -up- ota
    }

    component "USB_Host_Shield_2.0" as spiusbdriver
    component "IO" as io
    component "Key" as key
    component "GPIOPins" as gpiopins
    component "Zumo32U4" as zumo32u4
    component "ZumoDriverStateMachine" as zumostate
    component "ZumoStates" as states
    component "Zumo32U4Specification" as zumospec

    note right of spiusbdriver : Driver which sends\ndata to USB slave by\nusing the SPI bus
    note left of key: Driver for reading the Reset/WiFi key
    note left of io : Driver for easy (unbounced) read- and write operations
    note right of gpiopins : Pin description
    note left of zumo32u4: Driver for resetting,\ndebugging and flashing the robot
    note left of zumostate: State machine for Zumo32U4 driver
    note left of zumospec : Specifies the Zumo robot\nbootloader commands/data
    note left of states: The state machine states

    spiusbdriver -up- SPIUSB
    zumo32u4 -up- zumo32u4interface
    esp -up- ComReset
    key -up- ReadKey
    io -up- IO

    zumo32u4 -down-(IO
    zumo32u4 -down-(SPIUSB

    zumo32u4 *--> zumostate
    zumo32u4 ..> zumospec

    zumostate ..> states

    spiusbdriver -down-(SPI
    io -down-(arduinoIO
    key -down-(IO

    key .up.> gpiopins
    zumo32u4 .up.> gpiopins
}

package Hardware {
    interface "SPI-Controller" as spicontroller
    interface "GPIO" as gpio

    spihal --> spicontroller
    iohal --> gpio
}

"SPI-USB-Adapter" as usbadapter
"Zumo Robot" as zumorobot
"WiFi-Key" as hwwifikey

spicontroller --> usbadapter
usbadapter --> zumorobot
gpio --> zumorobot
gpio --> hwwifikey
@enduml
