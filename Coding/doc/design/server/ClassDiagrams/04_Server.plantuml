@startuml
package SystemServices
{
    class FileManager
    class FirmwareChecker
}

package Data
{
    class Store
}

package httpsserver
{
    class HTTPSServer
}

package ArduinoJson
{
}

enum ResponseCode
{
    SUCCESS = 200
    BAD_REQUEST = 400
    UNAUTHORIZED = 401
    FORBIDDEN = 403
    NOT_FOUND = 404
    METHOD_NOT_ALLOWED = 405
    ERROR = 500
    NOT_IMPLEMENTED = 501
}

class ApiRequest
{
    - m_commandId: String
    - m_jsonPayload: String
    + ApiRequest()
    + ~ApiRequest()
    + deserialize(serial: const String&): bool
    + getCommandId(): const String& {const}
    + getJsonPayload(): const String& {const}
}
ApiRequest ..> ArduinoJson : uses

class ApiResponse
{
    - m_statusCode: ResponseCode
    - m_jsonPayload: String
    + ApiResponse()
    + ~ApiResponse()
    + serialize(serial: String&): bool
    + setJsonPayload(jsonPayload: const String&): void
    + setstatusCode(statusCode: const ResponseCode&): void
}
ApiResponse ..> ArduinoJson : uses
ApiResponse "*" ..> "1" ResponseCode

class UserCredentials
{
    - m_username: String
    - m_password: String
    + UserCredentials
    + ~UserCredentials
    + getUsername(): const String& {const}
    + getPassword(): const String& {const}
    + deserialize(serial: const String&): bool
}
UserCredentials ..> ArduinoJson : uses

class SessionManager
{
    + SessionManager()
    + ~SessionManager()
    + checkSession(command: const Command*, connectionCtx: Session*): bool {const}
    + checkSession(command: const BinaryCommand*, connectionCtx: Session*): bool {const}
    + aquireSession(request: const ApiRequest&, response: ApiResponse&, connectionCtx: Session*): void {const}
    + invalidateSession(response: ApiResponse&, connectionCtx: Session*): void
}
SessionManager ..> Command
SessionManager ..> BinaryCommand
SessionManager ..> Session
SessionManager ..> ApiRequest
SessionManager ..> ApiResponse
SessionManager ..> UserCredentials

class RequestResponseHandler
{
    - m_echoDemoCommand: EchoDemoCommand
    - m_uploadZumoCommand: UploadZumoCommand
    - m_uploadCOMCommand: UploadCOMCommand
    - m_flashCOMCommand: FlashCOMCommand
    - m_rebootCOMCommand: RebootCOMCommand
    - m_rebootZumoCommand: RebootZumoCommand
    - m_setSTACredentialsCommand: SetSTACredentialsCommand
    - m_flashZumoCommand: FlashZumoCommand
    - m_getFirmwareInfoCommand: GetFirmwareInfoCommand
    - m_sessionManager: SessionManager
    - RequestResponseHandler()
    - ~RequestResponseHandler()
    - getCommandOfApiRequest(request: const ApiRequest&): Command*
    - getCommandOfBinaryApiRequest(commandId: const String&): BinaryCommand*
    + {static} getInstance(): RequestResponseHandler&
    + makeRequest(request: const ApiRequest&, response: ApiResponse&, connectionCtx: Session*): void
    + makeRequest(operation: const String&, response: ApiResponse&, connectionCtx: Session*): void
    + resetBinaryMode(): void
}
RequestResponseHandler "*" *--> "1" SessionManager
RequestResponseHandler "*" *--> "1" FirmwareChecker
RequestResponseHandler "*" o--> "*" Command
RequestResponseHandler "*" *--> "1" EchoDemoCommand
RequestResponseHandler "*" *--> "1" UploadZumoCommand
RequestResponseHandler "*" *--> "1" UploadCOMCommand
RequestResponseHandler "*" *--> "1" FlashCOMCommand
RequestResponseHandler "*" *--> "1" RebootCOMCommand
RequestResponseHandler "*" *--> "1" SetSTACredentialsCommand
RequestResponseHandler "*" *--> "1" FlashZumoCommand
RequestResponseHandler "*" *--> "1" GetFirmwareInfoCommand
RequestResponseHandler ..> Command
RequestResponseHandler ..> BinaryCommand
RequestResponseHandler ..> ApiRequest
RequestResponseHandler ..> ApiResponse
RequestResponseHandler ..> ResponseCode
RequestResponseHandler ..> Session
RequestResponseHandler ..> ArduinoJson

class KeyValue
{
    key: char* {readonly}
    value: char* {readonly}
}

class HTTPsWebServer
{
    - {static} SHARED_TCP_PORT: uint16_t = {readonly} 443
    - {static} MAX_CLIENTS: uint8_t = {readonly} = 4
    - {static} m_servedFileTypes: char* [][10] {readonly}
    - m_httpsServer: httpsserver::HTTPSServer
    - m_fileServeRoute: httpsserver::ResourceNode
    - m_apiRoute: httpsserver::WebSocketNode
    - m_store: Store&
    - {static} m_fileManager: FileManager
    - {static} registerFileServing(request: httpsserver::HTTPRequest*, response: httpsserver::HTTPResponse*): void
    - {static} getMIMEType(filePath: const String&, mimeType: String&): void
    + HTTPsWebServer()
    + ~HTTPsWebServer()
    + startServer(): bool
    + stopServer(): void
    + handleServer(): void
}
HTTPsWebServer "*" *--> "1" FileManager
HTTPsWebServer "*" *--> "1" Store
HTTPsWebServer "*" *--> "1" HTTPSServer
HTTPsWebServer "*" *--> "1" HTTPRequest
HTTPsWebServer "*" *--> "1" HTTPResponse
HTTPsWebServer "*" *--> "1" ResourceNode
HTTPsWebServer "*" *--> "1" WebSocketNode
HTTPsWebServer "*" *--> "1" RequestResponseHandler
HTTPsWebServer ..> KeyValue : uses
@enduml
