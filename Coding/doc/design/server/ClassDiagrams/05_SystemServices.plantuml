@startuml
package Data
{
    class Store
}

package "Arduino Core/EPS-IDF"
{
    class Preferences
    class SemaphoreHandle_t
    class mbedtls_pk_context
    class mbedtls_md_context_t
    class DNSServer
}

package "Crypto"
{
    class BLAKE2b
}

package "HAL"
{
    class GPIOPins
}

package Server
{
    class WebServer
}

package SystemServices {
    enum LogLevel
    {
        LEVEL_INVALID = 4
        LEVEL_DEBUG = 3
        LEVEL_INFO = 2
        LEVEL_WARN = 1
        LEVEL_ERROR = 0
    }

    class Log
    {
        - m_LogLevel : LogLevel = DEBUG
        - Log()
        - ~Log()
        {static} + getInstance(): Log&
        + getLogLevel(): const LogLevel& {const}
        + setLogLevel(level: const LogLevel&): void
        + writeLog(level: const LogLevel&, msg: const String&): void
    }
    Log "*" *--> "1" LogLevel

    class NVSManager
    {
        - m_preferences: Preferences
        + NVSManager()
        + ~NVSManager()
        + putEntry(key: const String&, value: const String&): bool
        + putEntry(key: const String&, value: const uint8_t*, length: const size_t): bool
        + deleteEntry(key: const String&): bool
        + readEntry(key: const String&, outputString: String&): void
        + readEntry(key: const String&, uint8_t* buffer, length: const size_t): bool
        + wipeNVS(): bool
        + closeNVS(): void
    }
    NVSManager "*" *--> "1" Preferences

    class FileManager
    {
        - m_fileHandle: File
        - {static} getInfo(infoString: String&): void
        + FileManager()
        + ~FileManager()
        + {static} initFS(): bool
        + {static} closeFS(): void
        + openFile(fileName: const String&, mode: const char*): bool
        + fileOpened(): bool
        + {static} deleteFile(fileName: const String&): bool
        + closeFile(): void
        + resetFilePointer(): bool
        + read4KBlock(buffer: uint8_t*): int16_t
        + write4KBlock(buffer: const uint8_t*, size: const uint16_t&): int16_t
        + {static} fileExists(fileName: const String&): bool
        + getFileSize(): int32_t {const}
        + {static} getFileSize(fileName: const String&): int32_t
    }
    FileManager "*" *--> "1" File
    FileManager ..> FileMode : uses

    class PublicSigningKey
    {
        + {static} PUB_RSA_SIGN_KEY: char* {readonly}
        + {static} KEY_LENGTH_BYTES: uint16_t {readonly}
    }

    class CryptoServices
    {
        - {static} SALT_LENGTH_BYTE: uint8_t {readonly} = 64
        - {static} BLAKE2b_LENGTH_BYTE: uint8_t {readonly} = 64
        - {static} SHA256_LENGTH_BYTE: uint16_t {readonly} = 32
        - m_hasherInstance: BLAKE2b
        - m_hashBuffer: uint8_t[SHA256_LENGTH_BYTE]
        - m_hashAvailable: bool
        - m_messageDigestInitialized: bool
        - m_publicKeyContext: mbedtls_pk_context
        - m_messageDigestContext: mbedtls_md_context_t
        - finalizeSHA256Hash(): void
        + CryptoServices()
        + ~CryptoServices()
        + getRandomSalt(outputString: String&): bool
        + hashBlake2b(cleartext: const String&, salt: const String&, outputString: String&): bool
        + updateSHA256Hash(dataChunk: const uint8_t*, dataSize: const uint16_t): bool
        + resetSHA256Hash(): void
        + getSHA256String(outputString: String&): bool
        + verifySignature(signature: const uint8_t*, signatureSize: const uint16_t): bool
    }
    CryptoServices "*" *--> "1" BLAKE2b
    CryptoServices "*" *--> "1" mbedtls_pk_context
    CryptoServices "*" *--> "1" mbedtls_md_context_t
    CryptoServices ..> PublicSigningKey : includes
    CryptoServices ..> GPIOPins : includes

    class FirmwareHeader
    {
        - m_readHeaderBytes: uint16_t
        - m_idBuffer: uint8_t[ID_SIZE_BYTE]
        - m_targetBuffer: uint8_t[TARGET_SIZE_BYTE]
        - m_versionBuffer: uint8_t[VERSION_SIZE_BYTE]
        - m_hashAlgBuffer: uint8_t[HASH_ALG_SIZE_BYTE]
        - m_signAlgBuffer: uint8_t[SIGN_ALG_SIZE_BYTE]
        - m_signatureBuffer: uint8_t[SIGNATURE_SIZE_BYTE]
        + {static} ID_SIZE_BYTE: uint8_t = {readonly} 16
        + {static} TARGET_SIZE_BYTE: uint8_t = {readonly} 16
        + {static} VERSION_SIZE_BYTE: uint8_t = {readonly} 1
        + {static} HASH_ALG_SIZE_BYTE: uint8_t = {readonly} 16
        + {static} SIGN_ALG_SIZE_BYTE: uint8_t = {readonly} 32
        + {static} SIGNATURE_SIZE_BYTE: uint16_t = {readonly} 256
        + {static} HEADER_SIZE_BYTE: uint16_t = {readonly} 337
        + FirmwareHeader()
        + ~FirmwareHeader()
        + deserialize(dataChunk: const uint8_t*, chunkSize: const uint16_t): void
        + reset(): void
        + getID(id: String&): void {const}
        + getVersion(): uint8_t {const}
        + getHashAlg(alg: String&): void {const}
        + getSignAlg(alg: String&): void {const}
        + getTarget(target: String&): void {const}
        + getSignature(): const uint8_t* {const}
    }

    class FirmwareChecker
    {
        - {static} EXPECTED_ID: char* = {readonly} "CPSFW"
        - {static} EXPECTED_VERSION: uint8_t = {readonly} 1
        - {static} EXPECTED_HASH_ALG: char* = {readonly} "SHA256"
        - {static} EXPECTED_SIGN_ALG: char* = {readonly} "RSA2048PKCS#1v15"
        - m_fwHeader: FirmwareHeader
        - m_crypto: CryptoServices
        - m_readPayloadBytes: uint32_t
        + {static} MAX_ZUMO_FW_BLOB_SIZE_BYTE: uint32_t = {readonly} 28672
        + {static} MAX_COM_FW_BLOB_SIZE_BYTE: uint32_t = {readonly} 1310720
        + FirmwareChecker()
        + ~FirmwareChecker()
        + deserializeHeader(dataChunk: const uint8_t*, chunkSize: const uint16_t): void
        + deserializePayload(dataChunk: const uint8_t*, chunkSize: const uint16_t): bool
        + reset(): void
        + idOK(): bool
        + getTarget(target: String&): void {const}
        + getComputedHashValue(outputString: String&): bool
        + isValid(expectedTarget: const String&): bool
    }
    FirmwareChecker "*" *--> "1" FirmwareHeader
    FirmwareChecker "*" *--> "1" CryptoServices

    class WiFiManager
    {
        - m_store: Store&
        - m_dnsServer: DNSServer
        - {static} DNS_PORT: uint8_t {readonly} = 53
        - m_dnsRetCode: bool = false
        - {static} HOSTNAME: char* = {readonly} "complatform.local"
        - {static} WIFI_CHANNEL_NO: uint8_t {readonly} = 1
        - {static} MAX_CLIENT_NO: uint8_t {readonly} = 4
        - {static} ERROR_REBOOT_DELAY_TIME_MS: uint16_t {readonly} = 2000
        - {static} WIFI_CONNECT_RETRY_DELAY_MS: uint16_t {readonly} = 500
        - m_apActive: bool = false
        - m_staActive: bool = false
        + WiFiManager()
        + ~WiFiManager()
        + startAP(): bool
        + stopAP(): bool
        + handleAP_DNS(): void
        + startSTA(): bool
        + stopSTA(): bool
    }
    WiFiManager "*" *--> "1" Store
    WiFiManager "*" *--> "1" DNSServer

    class System
    {
        - m_store: Store&
        - m_wifiManager: WiFiManager*
        - m_webServer: HTTPsWebServer*
        - {static} m_genKeyCertSemaphore: SemaphoreHandle_t
        - {static} SERVICE_HANDLING_SLEEP_TIME_MS: uint8_t {readonly} = 1
        - System()
        - ~System()
        - {static} genKeyCertTask(parameter: void*): void
        - registerKeyCertGenTask(): bool
        + {static} getInstance(): System&
        + init(): void
        + handleServices(): void
        + reset(): void
    }
    System "*" *--> "1" WiFiManager
    System "*" *--> "1" Store
    System "*" *--> "1" HTTPsWebServer
    System "*" *--> "1" SemaphoreHandle_t
}
@enduml
