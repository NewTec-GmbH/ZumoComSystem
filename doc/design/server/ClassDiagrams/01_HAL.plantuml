@startuml
package HAL
{
    package "Arduino Core"
    {
        class "Digital I/O" as ArduinoIO
        class SemaphoreHandle_t
    }

    package "USB_Host_Shield_2.0" as shieldpackage
    {
    }

    package "SystemServices"
    {
        class CryptoServices
    }

    enum GPIOPins
    {
        WIFI_AND_RESET_KEY_PIN = 0,
        ROBOT_RESET_PIN = 2,
        ANALOG_NOISE_SEED_PIN = 36
    }

    class IO
    {
        - m_ioMutex: SemaphoreHandle_t
        {static} - DEBOUNCE_DELAY_TIME_MS: uint8_t {readonly} = 50
        + {static} getInstance(): IO&
        + setPinMode(gpio: const uint8_t, mode: const uint8_t): void
        + readGPIODebounced(gpio: const uint8_t): uint8_t
        + readGPIO(gpio: const uint8_t): uint8_t
        + writeGPIO(gpio: const uint8_t, value: const uint8_t): void
        - IO()
        - ~IO()
    }
    IO  ..> ArduinoIO : uses
    IO  ..> SemaphoreHandle_t : uses

    class Key
    {
        - m_io : IO&
        {static} - LONG_PRESS_TIME_MS: uint32_t {readonly}  = 1000
        {static} + getInstance(): Key&
        + registerSystemReset(): void
        + readKey(): bool {const}
        - Key()
        - ~Key()
        - {static} resetTask(parameter: void*): void
        - {static} systemResetISR(): void
    }
    Key "0..*" *--> "1" IO
    Key ..> GPIOPins : includes

    ' class Robot
    ' {
        '         - m_io : IO&
        '         {static} - ROBOT_RESET_TIME_MS: uint32_t {readonly} = 500
        '         {static} + getInstance(): Robot&
        '         + resetRobotNow(): void
        '         - Robot()
        '         - ~Robot()

        '
    ' }
    ' Robot "0..*" *--> "1" IO
    ' Robot ..> GPIOPins : includes

    enum ZumoStates
    {
        CLOSED
        OPENED
        FLASHING
        READING_SERIAL
        WRITING_SERIAL
    }

    class ZumoDriverStateMachine
    {
        - m_currentState: ZumoStates
        + ZumoDriverStateMachine()
        + ~ZumoDriverStateMachine()
        + setState(state: ZumoStates): bool
        + getState(): ZumoStates
    }
    ZumoDriverStateMachine ..> ZumoStates

    class Zumo32U4Specification
    {
        + {static} TRANSFER_BLOCK_SIZE_BYTES: uint8_t {readonly} = 128

        + {static} READ_SW_ID: uint8_t {readonly} = 0x53
        + {static} READ_SW_VERSION: uint8_t {readonly} = 0x56
        + {static} READ_HW_VERSION: uint8_t {readonly} = 0x76
        + {static} READ_PROGRAMMER_TYPE: uint8_t {readonly} = 0x53
        + {static} READ_SUPPORTED_DEVICE_CODE: uint8_t {readonly} = 0x74
        + {static} READ_SIGNATURE: uint8_t {readonly} = 0x73
        + {static} READ_LSB_FUSE: uint8_t {readonly} = 0x46
        + {static} READ_MSB_FUSE: uint8_t {readonly} = 0x4E
        + {static} READ_EXTENDED_FUSE: uint8_t {readonly} = 0x51
        + {static} CHECK_BLOCK_FLASH_SUPPORT: uint8_t {readonly} = 0x62

        + {static} SET_MEMORY_ADDR: uint8_t {readonly} = 0x41
        + {static} ENABLE_AUTO_INCR_MEMORY_WRITE_ADDR: uint8_t {readonly} = 0x61
        + {static} SET_DEVICE_TYPE: uint8_t[] {readonly} = {0x64, 0x44}

        + {static} ENTER_PROGRAMMING_MODE: uint8_t {readonly} = 0x50
        + {static} EXIT_PROGRAMMING_MODE: uint8_t {readonly} = 0x4C
        + {static} EXIT_BOOTLOADER_MODE: uint8_t {readonly} = 0x45

        + {static} WRITE_MEMORY: uint8_t[] {readonly} = {0x42, 0x00, 0x80, 0x46}
        + {static} READ_MEMORY: uint8_t[] {readonly} = {0x67, 0x00, 0x80, 0x46}

        + {static} RET_OK: uint8_t {readonly} = 0x0D
        + {static} EXPECTED_PROGRAMMER_ID: char* {readonly} = "CATERIN"
        + {static} EXPECTED_SW_VERSION: uint8_t[] {readonly} = {0x31, 0x30}
        + {static} EXPECTED_HW_VERSION: uint8_t {readonly} = 0x3F
        + {static} EXPECTED_DEVICE_CODE: uint8_t {readonly} = 0x44
        + {static} EXPECTED_AUTO_INCR_ADDR_BUF_SIZE: uint8_t {readonly} = 0x59
        + {static} EXPECTED_BLOCK_BUFFER_SIZE: uint8_t[] {readonly} = {0x59, 0x00, 0x80}
        + {static} EXPECTED_LSB_FUSE_VALUE: uint8_t {readonly} = 0xFF
        + {static} EXPECTED_MSB_FUSE_VALUE: uint8_t {readonly} = 0xD0
        + {static} EXPECTED_EXTENDED_FUSE_VALUE: uint8_t {readonly} = 0xC8
        + {static} EXPECTED_SIGNATURE: uint8_t[] {readonly} = {0x87, 0x95, 0x1E}
    }

    class Zumo32U4
    {
        - m_stateMachine: ZumoDriverStateMachine
        + Zumo32U4()
        + ~Zumo32U4()
        + open(): bool
        + close(): bool
        + getState(): ZumoStates
        + restart(): bool
        + readSerial(dataBuffer: const uint8_t*, chunkSize: const uint16_t): bool
        + writeSerial(dataBuffer: const uint8_t*, chunkSize: const uint16_t): bool
        + beginWriteFirmware(firmwareSize: uint16_t, expectedHash: const String&): bool
        + writeFirmwareChunk(dataChunk: const uint8_t*, chunkSize: const uint16_t): bool
        + finalizeWriteFirmware(): bool
        - sendCommand(command: const uint8_t*, retDataSize: const uint8_t, retData: const uint8_t*): bool
        - enterBootloaderMode(): bool
        - exitBootloaderMode(): bool
        - enterProgrammerMode(): bool
        - exitProgrammermode(): bool
        - checkPlatform(): bool
        - verifyFuses(): bool
        - configurePlatform(): bool
        - readMemory(dataChunk: const uint8_t*, chunkSize: const uint16_t): bool
        - resetReadAddress(): bool
        - writeMemory(dataChunk: const uint8_t*, chunkSize: const uint16_t): bool
        - resetWriteAddress(): bool
        - verifyWrittenFirmware(expectedHash: const String&): bool
    }
    Zumo32U4 "0..*" *--> "1" ZumoDriverStateMachine
    Zumo32U4 "0..*" *--> "1" Zumo32U4Specification
    Zumo32U4 "0..*" *--> "1" IO
    Zumo32U4 "0..*" *--> "1" shieldpackage
    Zumo32U4 "0..*" *--> "1" CryptoServices
    Zumo32U4 ..> GPIOPins : includes
}

@enduml
