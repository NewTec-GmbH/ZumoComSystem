@startuml
package Data
{
    class Store
}

package "Arduino Core"
{
    class Preferences
}

package "Crypto"
{
    class BLAKE2b
}

package Server
{
    class WebServer
}

package SystemServices {
    enum LogLevel
    {
        LEVEL_DEBUG
        LEVEL_INFO
        LEVEL_WARN
        LEVEL_ERROR
    }

    class Log
    {
        - m_LogLevel : LogLevel = DEBUG
        {static} + getInstance(): Log&
        + getLogLevel(): const LogLevel& {const}
        + setLogLevel(level: const LogLevel&): void
        + writeLog(level: const LogLevel&, msg: const String&): void
        - Log()
        - ~Log()
    }
    Log "0..*" *--> "1" LogLevel

    class NVSManager
    {
        - m_preferences: Preferences
        + NVSManager()
        + ~NVSManager()
        + putEntry(key: const String&, value: const String&): bool
        + putEntry(key: const String&, value: const uint8_t*, length: const size_t): bool
        + deleteEntry(key: const String&): bool
        + readEntry(key: const String&, outputString: String&): void
        + readEntry(key: const String&, uint8_t* buffer, length: const size_t): bool
        + wipeNVS(): bool
        + closeNVS(): void
    }
    NVSManager "0..*" *--> "1" Preferences

    class FileManager
    {
        - m_fileHandle: File
        + FileManager()
        + ~FileManager()
        + {static} initFS(): bool
        + openFile(fileName: const String&, mode: const char*): bool
        + closeFile(): void
        + resetFilePointer(): bool
        + read4KBlock(buffer: uint8_t*): int16_t
        + write4KBlock(buffer: uint8_t*, size: const uint16_t&): int16_t
        + {static} fileExists(fileName: const String&): bool
        + getFileSize(): int32_t {const}
        + {static} getFileSize(fileName: const String&): int32_t
        + {static} listFiles(): std::vector<String>
        - {static} getInfo(): String
    }
    FileManager ..> FileMode : uses

    class CryptoServices
    {
        - {static} SALT_LENGTH_BYTE: uint8_t {readonly} = 64
        - {static} HASH_LENGTH_BYTE: uint8_t {readonly} = 64
        - m_hasherInstance: BLAKE2b
        + CryptoServices()
        + ~CryptoServices()
        + getRandomSalt(outputString: String&): bool
        + hashBlake2b(cleartext: const String&, salt: const String&, outputString: String&): bool
    }
    CryptoServices "0..*" *--> "1" BLAKE2b

    class WiFiManager
    {
        - m_store: Store&
        - m_dnsServer: DNSServer
        - DNS_PORT: uint8_t {readonly} = 53
        - m_dnsRetCode: bool = false
        - {static} HOSTNAME: char* = {readonly} "complatform.local"
        - {static} WIFI_CHANNEL_NO: uint8_t {readonly} = 1
        - {static} MAX_CLIENT_NO: uint8_t {readonly} = 4
        - {static} ERROR_REBOOT_DELAY_TIME_MS: uint16_t {readonly} = 2000
        - {static} WIFI_CONNECT_RETRY_DELAY_MS: uint16_t {readonly} = 500
        - m_apActive: bool = false
        - m_staActive: bool = false
        + WiFiManager()
        + ~WiFiManager()
        + startAP(): bool
        + stopAP(): bool
        + handleAP_DNS(): void
        + startSTA(): bool
        + stopSTA(): bool
    }
    WiFiManager "0..*" *--> "1" Store

    class System
    {
        - m_store: Store&
        - m_wifiManager: WiFiManager
        - m_webServer: WebServer
        - {static} m_genKeyCertSemaphore: SemaphoreHandle_t
        - SERVICE_HANDLING_SLEEP_TIME_MS {readonly} = 1
        + {static} getInstance(): System&
        + init(): void
        + handleServices(): void
        + reset(): void
        - System()
        - ~System()
        - {static} genKeyCertTask(parameter: void*): void
        - registerKeyCertGenTask(): bool
    }
    System "0..*" *--> "1" WiFiManager
    System "0..*" *--> "1" Store
    System "0..*" *--> "1" WebServer
}
@enduml
