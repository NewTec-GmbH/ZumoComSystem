@startuml

package SystemServices
{
    class FileManager
}

package Data
{
    class Store
}

package httpsserver
{
    class HTTPSServer
}

enum ResponseCode
{
    SUCCESS = 200,
    BAD_REQUEST = 400,
    UNAUTHORIZED = 401,
    FORBIDDEN = 403,
    NOT_FOUND = 404,
    METHOD_NOT_ALLOWED = 405,
    ERROR = 500,
    NOT_IMPLEMENTED = 501
}

class ApiRequest
{
    - m_commandId: String
    - m_jsonPayload: String
    + ApiRequest()
    + ~ApiRequest()
    + deserialize(serial: String): bool
    + getCommandId(): String
    + getJsonPayload(): String
}

class ApiResponse
{
    - m_statusCode: ResponseCode
    - m_jsonPayload: String
    + ApiResponse()
    + ~ApiResponse()
    + serialize(): String
    + setJsonPayload(jsonPayload: String): void
    + setstatusCode(statusCode: ResponseCode): void
}

class UserCredentials
{
    - m_username: String
    - m_password: String
    + UserCredentials
    + ~UserCredentials
    + getUsername(): const String&
    + getPassword(): const String&
    + deserialize(serial: String): bool
}

class SessionManager
{
    - m_store: Store&
    + SessionManager()
    + ~SessionManager()
    + checkSession(command: Command*, connectionCtx: Session*): bool
    + aquireSession(request: ApiRequest&, response: ApiResponse&, connectionCtx: Session*): void
}

class RequestResponseHandler
{
    - {static} NUMBER_OF_API_SERVICES: uint8_t = {readonly} 1
    - m_apiServices: Command*[]
    - m_sessionManager: SessionManager
    - RequestResponseHandler()
    - ~RequestResponseHandler()
    - getCommandOfApiRequest(request: ApiRequest&): Command*
    + {static} getInstance(): RequestResponseHandler&
    + makeRequest(request: ApiRequest&, response: ApiResponse&, connectionCtx: Session*): void
}
RequestResponseHandler "0..*" *--> "1" SessionManager
RequestResponseHandler "0..*" o--> "0..*" Command
RequestResponseHandler ..> ApiRequest
RequestResponseHandler ..> ApiResponse
RequestResponseHandler ..> ResponseCode

class HTTPsWebServer
{
    - {static} SHARED_TCP_PORT: uint16_t = {readonly} 443
    - {static} MAX_CLIENTS: uint8_t = {readonly} = 4
    - {static} m_servedFileTypes: String[][] {readonly}
    - m_httpsServer: httpsserver::HTTPSServer
    - m_fileServeRoute: httpsserver::ResourceNode
    - m_apiRoute: httpsserver::WebSocketNode
    - m_store: Store&
    - {static} m_fileManager: FileManager
    - m_requestResponseHandler: RequestResponseHandler
    - {static} registerFileServing(request: httpsserver::HTTPRequest*, response: httpsserver::HTTPResponse*): void
    - {static} getMIMEType(filePath: String): String
    + HTTPsWebServer()
    + ~HTTPsWebServer()
    + startServer(): bool
    + stopServer(): bool
    + handleServer(): void
}
HTTPsWebServer "0..*" *--> "1" FileManager
HTTPsWebServer "0..*" *--> "1" Store
HTTPsWebServer "0..*" *--> "1" HTTPSServer
HTTPsWebServer "0..*" *--> "1" RequestResponseHandler
@enduml
