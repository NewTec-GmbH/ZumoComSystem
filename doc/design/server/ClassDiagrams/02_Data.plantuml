@startuml
package SystemService
{
    class NVSManager
    {
    }
}

package httpsserver
{
    class SSLCert
    class WebSocketHandler
}

package Data
{
    class NetworkCredentials
    {
        - {static} MAX_SSID_LENGTH_CHARS {readonly} = 31
        - {static} MIN_PASSPHRASE_LENGTH_CHARS {readonly} = 8
        - {static} MAX_PASSPHRASE_LENGTH_CHARS {readonly} = 63
        - m_ssid: String
        - m_passphrase: String

        + NetworkCredentials()
        + ~NetworkCredentials()
        + getSSID(): String
        + setSSID(ssid: String, staMode: bool): bool
        + getPassphrase(): String
        + setPassphrase(passphrase: String): bool
        + serialize(): String
        + deserialize(serial: String): bool
    }

    class KeyCert
    {
        + {static} RSA_KEY_SIZE_BYTE : size_t {readonly} = 1190
        + {static} CERT_SIZE_BYTE: size_t {readonly} = 766
        - m_sslCert: httpsserver::SSLCert
        - {static} m_binaryKey: uint8_t[]
        - {static} m_binaryCert: uint8_t[]
        - m_certGenerated: bool = false
        + KeyCert()
        + ~KeyCert()
        + generateNewCert(): bool
        + getSSLCert(): httpsserver::SSLCert*
        + serialize(keyBuffer: uint8_t*, certBuffer: uint8_t*): void
        + deserialize(keyBuffer: uint8_t*, certBuffer: uint8_t*): void
        - freeSSLMemory(): void
    }
    KeyCert "0..*" *--> "1" SSLCert

    enum Permission
    {
        ANY,
        NONE,
        DEBUG_ZUMO,
        FLASH_ZUMO,
        FLASH_COM,
        REBOOT_ZUMO,
        REBOOT_COM,
        CONFIGURE_NETWORK,
        ECHO_DEMO
    }

    class User
    {
        - {static} MIN_PASSWORD_CHARS: uint8_t {readonly} = 8
        - {static} MAX_PASSWORD_CHARS: uint8_t {readonly} = 128
        - {static} MIN_USERNAME_CHARS: uint8_t {readonly} = 2
        - {static} MAX_USERNAME_CHARS: uint8_t {readonly} = 16
        - {static} MAX_REGISTERED_USERS: uint8_t {readonly} = 8
        - {static} MAX_PERMISSIONS_PER_USER: uint8_t {readonly} = 32
        - {static} m_numberOfRegisteredUsers: uint8_t = 0
        - {static} m_registeredUsers: User*[MAX_REGISTERED_USERS]
        - m_crypto: CryptoServices
        - m_username: String
        - m_hashedPassword: String
        - m_passwordSalt: String
        - m_permissions: Permission[MAX_PERMISSIONS_PER_USER]
        - m_numberOfPermissions: uint8_t = 0
        - {static} getUserIdx(username: const String&): int8_t
        + User()
        + ~User()
        + {static} checkAdminAccount(): bool
        + {static} getPermissions(numberOfPermissions: uint8_t&): Permission*
        + {static} getUser(username: String): User*
        + {static} checkCredentials(username: const String&, password: const String&): bool
        + {static} putUser(username: const String&, password: const String&, permissions: const Permission*, numberOfPermissions: const uint8_t, updateUser: const bool)
        + {static} deleteUser(username: const String&): bool
        + serialize(serialized: String&): void
        + deserialize(serial: String&): bool
    }
    User "0..*" *--> "1" CryptoServices

    class Session
    {
        - {static} MAX_CLIENTS: uint8_t {readonly} = 4
        - {static} SESSION_TIMEOUT_SECONDS {readonly} = 900;
        - {static} m_sessions: Session[MAX_CLIENTS];
        - {static} m_numberOfActiveClients: uint8_t = 0
        - m_sessionAuthenticated: bool = false
        - m_linkedUser: User
        - m_lastAccessTime: unsigned long = 0
        + Session()
        + ~Session()
        + {static} start(): void
        + {static} create(): httpsserver::WebSocketHandler*
        + onMessage(inputBuffer: httpsserver::WebsocketInputStreambuf*): void
        + onClose(): void
        + isAuthenticated(): bool 
        + authenticateSession(user: User): void
        + deauthenticateSession(): void
        + {static} handleSessionTimeout(parameter: void*): void
        + getPermissions(): Permission*
    }
    Session "1" *--> "4" Session
    WebSocketHandler <|-down- Session : is a

    class Store
    {
        - m_nvsmgr: NVSManager
        - m_staCredentials: NetworkCredentials
        - m_apCredentials: NetworkCredentials
        - m_keyCert: KeyCert
        - m_session: Session
        - m_users: User

        - Store()
        - ~Store()
        {static} + getInstance(): Store&
        + getSession(): Session&
        + getSTACredentials(): NetworkCredentials
        + setSTACredentials(credentials: NetworkCredentials): void
        + saveSTACredentials(): bool
        + loadSTACredentials(): bool
        + getKeyCert(): SSLCert&
        + setKeyCert(keycert: KeyCert): void
        + saveKeyCert(): bool
        + loadKeyCert(): bool
        + getUsers(): User&
        + setUsers(users: User): void
        + saveUsers(): bool
        + loadUsers(): bool
        + getAPCredentials(): NetworkCredentials
        + setAPCredentials(credentials: NetworkCredentials): void
        + closeStore(): void
    }
    Store "0..*" *--> "1" NVSManager
    Store "0..*" *--> "2" NetworkCredentials
    Store "0..*" *--> "1" KeyCert
    Store "0..*" *--> "1" User
}
@enduml
