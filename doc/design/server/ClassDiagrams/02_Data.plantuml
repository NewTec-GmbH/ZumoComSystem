@startuml
package SystemService
{
    class NVSManager
    {
    }
}

package ArduinoJson
{
}

package httpsserver
{
    class SSLCert
    class WebSocketHandler
}

package Data
{
    class NetworkCredentials
    {
        - {static} MAX_SSID_LENGTH_CHARS: uint8_t {readonly} = 31
        - {static} MIN_PASSPHRASE_LENGTH_CHARS: uint8_t {readonly} = 8
        - {static} MAX_PASSPHRASE_LENGTH_CHARS: uint8_t {readonly} = 63
        - m_ssid: String
        - m_passphrase: String
        + NetworkCredentials()
        + ~NetworkCredentials()
        + getSSID(): const String& {const}
        + setSSID(ssid: const String&, staMode: const bool): bool
        + getPassphrase(): const String& {const}
        + setPassphrase(passphrase: const String&): bool
        + serialize(serial: String&): bool
        + deserialize(serial: const String&, staCredentials: const bool): bool
    }
    NetworkCredentials ..> ArduinoJson : uses

    class KeyCert
    {
        - m_sslCert: httpsserver::SSLCert
        - {static} m_binaryKey: uint8_t[RSA_KEY_SIZE_BYTE]
        - {static} m_binaryCert: uint8_t[CERT_SIZE_BYTE]
        - m_certGenerated: bool = false
        - freeSSLMemory(): void
        + {static} RSA_KEY_SIZE_BYTE : size_t {readonly} = 1190
        + {static} CERT_SIZE_BYTE: size_t {readonly} = 766
        + KeyCert()
        + ~KeyCert()
        + generateNewCert(): bool
        + getSSLCert(): httpsserver::SSLCert*
        + serialize(keyBuffer: uint8_t*, certBuffer: uint8_t*): void
        + deserialize(keyBuffer: const uint8_t*, certBuffer: const uint8_t*): void
    }
    KeyCert "0..*" *--> "1" SSLCert

    class FirmwareInfo
    {
        - {static} NUMBER_OF_SAVED_FIRMWARES: uint8_t {readonly} = 2
        - {static} m_savedFirmwares:uint8_t = 0
        - {static} m_fwInfos: FirmwareInfo[NUMBER_OF_FIRMWARES]
        - m_available: bool
        - m_targetSystem: String
        - m_payloadHashValue: String
        - m_isValid: bool
        - m_sizeBytes: uint32_t
        + FirmwareInfo()
        + ~FirmwareInfo()
        + {static} putInfo(targetSystem: const String&, payloadHashValue: const String&, isValid: const bool, sizeBytes: const uin32_t, updateInfo: const bool): bool
        + {static} getInfo(targetSystem: const String&): const FirmwareInfo*
        + {static} deleteInfo(targetSystem: const String&): void
        + {static} serialize(serial: String&): bool
        + serializeInstance(serial: String&): bool {const}
        + {static} deserialize(serial: const String&): bool
        + getTargetSystem(): const String& {const}
        + getPayloadHashValue(): const String& {const}
        + isValid(): bool
    }
    FirmwareInfo "1" *--> "2" FirmwareInfo
    FirmwareInfo ..> ArduinoJson : uses

    enum Permission
    {
        ANY
        NONE
        DEBUG_ZUMO
        FLASH_ZUMO
        FLASH_COM
        REBOOT_ZUMO
        REBOOT_COM
        CONFIGURE_NETWORK
        ECHO_DEMO
    }

    class User
    {
        - {static} MIN_PASSWORD_CHARS: uint8_t {readonly} = 8
        - {static} MAX_PASSWORD_CHARS: uint8_t {readonly} = 128
        - {static} MIN_USERNAME_CHARS: uint8_t {readonly} = 2
        - {static} MAX_USERNAME_CHARS: uint8_t {readonly} = 16
        - {static} MAX_REGISTERED_USERS: uint8_t {readonly} = 8
        - {static} MAX_PERMISSIONS_PER_USER: uint8_t {readonly} = 32
        - {static} DEFAULT_ADMIN_USERNAME: const char* {readonly} = "admin"
        - {static} DEFAULT_ADMIN_PASSWORD: const char* {readonly} = "21091986"
        - {static} DEFAULT_USER_USERNAME: const char* {readonly} = "student"
        - {static} DEFAULT_USER_PASSWORD: const char* {readonly} = "nt2021nt"
        - {static} m_numberOfRegisteredUsers: uint8_t = 0
        - {static} m_registeredUsers: User*[MAX_REGISTERED_USERS]
        - {static} m_userMutex: SemaphoreHandle_t
        - {static} m_crypto: CryptoServices
        - m_username: String
        - m_hashedPassword: String
        - m_passwordSalt: String
        - m_permissions: Permission[MAX_PERMISSIONS_PER_USER]
        - m_numberOfPermissions: uint8_t = 0
        - {static} getUserIdx(username: const String&): int8_t
        + User()
        + ~User()
        + {static} registerAdminAccount(): bool
        + {static} registerDefaultUser(): bool
        + {static} getPermissions(numberOfPermissions: uint8_t&): const Permission*
        + {static} getUsername(): String
        + {static} getUser(username: const String&): User*
        + {static} checkCredentials(username: const String&, password: const String&): bool
        + {static} putUser(username: const String&, password: const String&, permissions: const Permission*, numberOfPermissions: const uint8_t, updateUser: const bool): bool
        + {static} deleteUser(username: const String&): bool
        + serialize(serialized: String&): bool {const}
        + deserialize(serial: const String&): bool
    }
    User "0..*" *--> "1" CryptoServices
    User "0..*" *--> "1" SemaphoreHandle_t
    User "0..*" *--> "32" Permission
    User "1" o--> "4" User
    User ..> ArduinoJson : uses

    class Session
    {
        - {static} MAX_CLIENTS: uint8_t {readonly} = 4
        - {static} MAX_TEXT_REQUEST_SIZE_BYTE: uint16_t {readonly} = 512
        - {static} SESSION_TIMEOUT_SECONDS: uint16_t {readonly} = 900;
        - {static} m_sessions: Session*[MAX_CLIENTS];
        - {static} m_sessionMutex: SemaphoreHandle_t
        - {static} m_numberOfActiveClients: uint8_t = 0
        - m_expectBinary: bool = false
        - m_expectedOperation: String
        - m_sessionAuthenticated: bool = false
        - m_linkedUser: User*
        - m_lastAccessTime: unsigned long = 0
        - {static} handleSessionTimeout(parameter: void*): void
        + {static} MAX_BUFFER_SIZE_BYTE: uin16_t = {readonly} 2048
        + {static} API_TIMEOUT_MS: uin16_t = {readonly} 15000
        + m_readBytes: uint32_t
        + m_streamByteIdx: uint32_t
        + m_expectingBytes: uint32_t
        + m_binaryBuffer: uint8_t[MAX_BUFFER_SIZE_BYTE]
        + Session()
        + ~Session()
        + {static} start(): bool
        + {static} create(): httpsserver::WebSocketHandler*
        + onMessage(inputBuffer: httpsserver::WebsocketInputStreambuf*): void
        + onClose(): void
        + initBinaryMode(operation: const String&, binarySize: const uint32_t): void
        + exitBinaryMode(): void
        + isAuthenticated(): bool  {const}
        + authenticateSession(user: User*): void
        + deauthenticateSession(): void
        + getPermissions(numberOfPermissions: uint8_t&): const Permission*
    }
    Session "0..*" *--> "1" SemaphoreHandle_t
    Session "1" *--> "4" Session
    WebSocketHandler <|-down- Session : is a
    Session "1" o--> "1" User
    Session ..> httpsserver::WebSocketHandler : uses
    Session ..> httpsserver::WebsocketInputStreambuf : uses
    Session ..> Permission : includes

    class Store
    {
        - m_nvsmgr: NVSManager
        - m_staCredentials: NetworkCredentials
        - m_apCredentials: NetworkCredentials
        - m_keyCert: KeyCert
        - m_users: User
        - Store()
        - ~Store()
        {static} + getInstance(): Store&
        + getSTACredentials(): const NetworkCredentials& {const}
        + setSTACredentials(credentials: const NetworkCredentials&): void
        + saveSTACredentials(): bool
        + loadSTACredentials(): bool
        + deleteSTACredentials(): bool
        + getKeyCert(): KeyCert&
        + setKeyCert(keycert: const KeyCert&): void
        + saveKeyCert(): bool
        + loadKeyCert(): bool
        + getUsers(): const User& {const}
        + setUsers(users: const User&): void
        + saveUsers(): bool
        + loadUsers(): bool
        + saveFirmwareInfo(): bool
        + loadFirmwareInfo(): bool
        + getAPCredentials(): const NetworkCredentials& {const}
        + setAPCredentials(credentials: const NetworkCredentials&): void
        + closeStore(): void
    }
    Store "0..*" *--> "1" NVSManager
    Store "0..*" *--> "2" NetworkCredentials
    Store "0..*" *--> "1" KeyCert
    Store "0..*" *--> "1" User
    Store "0..*" *--> "1" FirmwareInfo
}
@enduml
